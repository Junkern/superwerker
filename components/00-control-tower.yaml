AWSTemplateFormatVersion: 2010-09-09

Parameters:
  AuditAWSAccountEmail:
    Type: String
  LogArchiveAWSAccountEmail:
    Type: String

Resources:

  SetupControlTowerCanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess # fixme: least privilege
      Policies:
        - PolicyName: AllowS3List
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - cloudwatch:PutMetricData
                Resource: '*'

  SetupControlTowerCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: fnptcm-bootstrap-ct
      ArtifactS3Location: !Sub s3://${SetupControlTowerArtifactLocation}
      ExecutionRoleArn: !GetAtt SetupControlTowerCanaryRole.Arn
      RuntimeVersion: syn-1.0
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 600
      Schedule:
        DurationInSeconds: 3600
        Expression: rate(0 minute)
      Code:
        Handler: pageLoadBlueprint.handler
        Script: !Sub |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const httpGet = url => {
            const https = require('https');
            return new Promise((resolve, reject) => {
              https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => resolve(body));
              }).on('error', reject);
            });
          };

          const flowBuilderBlueprint = async function () {
            let page = await synthetics.getPage();

            await synthetics.executeStep('consoleLogin', async function () {
              const AWS = require("aws-sdk");

              const federationEndpoint = 'https://signin.aws.amazon.com/federation';
              const issuer = 'founopticum';
              const destination = 'https://console.aws.amazon.com/';

              let credentials = await AWS.config.credentialProvider.resolve((err, cred) => { return cred; }).resolvePromise()

              const session = {
                sessionId: credentials.accessKeyId,
                sessionKey: credentials.secretAccessKey,
                sessionToken: credentials.sessionToken
              };

              const encodedSession = encodeURIComponent(JSON.stringify(session));
              const signinTokenUrl = `${!federationEndpoint}?Action=getSigninToken&SessionDuration=3600&Session=${!encodedSession}`;

              const signinResponse = await httpGet(signinTokenUrl);

              let consoleLoginUrl = `${!federationEndpoint}?Action=login&Issuer=${!issuer}&Destination=${!destination}&SigninToken=${!
                JSON.parse(signinResponse).SigninToken
              }`;

              await page.goto(consoleLoginUrl, {waitUntil: ['load', 'networkidle0']});

            });

            await synthetics.executeStep('gotoCT', async function () {
              await page.goto("https://eu-west-1.console.aws.amazon.com/controltower/home?region=eu-west-1", {waitUntil: ['load', 'networkidle0']});
            });

            await synthetics.executeStep('gotoLlandingZoneCreation', async function () {
              await page.click("#get-started-btn > button");
              await page.waitFor(10000); // waitForNavigation does not work here, so use sleep()
            });

            await synthetics.executeStep('createLandingZone', async function () {
              await page.click("#awsui-input-0")
              await page.click("#awsui-input-1")
              await page.click("#awsui-input-2")
              await page.type("#awsui-input-0", "${LogArchiveAWSAccountEmail}")
              await page.type("#awsui-input-1", "${AuditAWSAccountEmail}")
              await page.click("#awsui-checkbox-0")
              await page.waitFor(10000); // wait for AWS UI to settle, then click
              await page.click("#save-button > button");
              await page.waitForNavigation({waitUntil: ['domcontentloaded']});
            });

          };

          exports.handler = async () => {
            return await flowBuilderBlueprint();
          };

  SetupControlTowerArtifactLocation:
    Type: AWS::S3::Bucket

  SetupControlTowerArtifactLocationPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SetupControlTowerArtifactLocation
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: '*'
            Resource:
              - !GetAtt SetupControlTowerArtifactLocation.Arn
              - !Sub ${SetupControlTowerArtifactLocation.Arn}/*
            Principal:
              AWS: !GetAtt SetupControlTowerCanaryRole.Arn

#  SetupLandingZoneRule:
#    Type: AWS::Events::Rule
#    Properties:
#      EventPattern:
#        detail-type:
#          - AWS Service Event via CloudTrail
#        source:
#          - aws.controltower
#        detail:
#          serviceEventDetails:
#            setupLandingZoneStatus:
#              state:
#                - SUCCEEDED
#          eventName:
#            - SetupLandingZone
#
#      State: ENABLED
#      Targets:
#        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${FounopticumBootstrap}
#          Id: SetupLandingZone
#          RoleArn: !GetAtt SSMAutomationExecutionRoleforCWEvents.Arn
#          InputTransformer:
#            InputPathsMap:
#              organizationalUnits: $.detail.serviceEventDetails.setupLandingZoneStatus.organizationalUnits
#              accounts: $.detail.serviceEventDetails.setupLandingZoneStatus.accounts
#            InputTemplate: |
#              {
#                "organizationalUnits": [<organizationalUnits>],
#                "accounts": [<accounts>]
#              }

  UpdateLandingZoneRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
#        detail-type:
#          - AWS Service Event via CloudTrail
        source:
          - schnuffer
#        detail:
#          serviceEventDetails:
#            updateLandingZoneStatus:
#              state:
#                - SUCCEEDED
#          eventName:
#            - UpdateLandingZone

      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${FounopticumBootstrap}
          Id: UpdateLandingZone
          RoleArn: !GetAtt SSMAutomationExecutionRoleforCWEvents.Arn
          InputTransformer:
            # currently, it seems that only passing strings to SSM Automation is allowed, no structures, so we have to flatten it here
            InputPathsMap:
              organizationalUnit0Id: $.detail.serviceEventDetails.updateLandingZoneStatus.organizationalUnits[0].organizationalUnitId
              organizationalUnit1Id: $.detail.serviceEventDetails.updateLandingZoneStatus.organizationalUnits[1].organizationalUnitId
              organizationalUnit1Name: $.detail.serviceEventDetails.updateLandingZoneStatus.organizationalUnits[1].organizationalUnitName
              organizationalUnit0Name: $.detail.serviceEventDetails.updateLandingZoneStatus.organizationalUnits[0].organizationalUnitName
              account0Id: $.detail.serviceEventDetails.updateLandingZoneStatus.accounts[0].accountId
              account0Name: $.detail.serviceEventDetails.updateLandingZoneStatus.accounts[0].accountName
              account1Id: $.detail.serviceEventDetails.updateLandingZoneStatus.accounts[1].accountId
              account1Name: $.detail.serviceEventDetails.updateLandingZoneStatus.accounts[1].accountName
              account2Id: $.detail.serviceEventDetails.updateLandingZoneStatus.accounts[2].accountId
              account2Name: $.detail.serviceEventDetails.updateLandingZoneStatus.accounts[2].accountName
            InputTemplate: |
              {
                "organizationalUnit0Id": [<organizationalUnit0Id>],
                "organizationalUnit1Id": [<organizationalUnit1Id>],
                "organizationalUnit1Name": [<organizationalUnit1Name>],
                "organizationalUnit0Name": [<organizationalUnit0Name>],
                "account0Id": [<account0Id>],
                "account0Name": [<account0Name>],
                "account1Id": [<account1Id>],
                "account1Name": [<account1Name>],
                "account2Id": [<account2Id>],
                "account2Name": [<account2Name>]
              }

  SSMAutomationExecutionRoleforCWEvents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartAutomationExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${FounopticumBootstrap}:*

  FounopticumBootstrap:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        assumeRole: !GetAtt StartExecutionRoleForSSM.Arn
        parameters:
          organizationalUnit0Id:
            type: String
          organizationalUnit1Id:
            type: String
          organizationalUnit0Name:
            type: String
          organizationalUnit1Name:
            type: String
          account0Id:
            type: String
          account0Name:
            type: String
          account1Id:
            type: String
          account1Name:
            type: String
          account2Id:
            type: String
          account2Name:
            type: StringMap
        mainSteps:
          - name: StartAutomationExecution
            action: aws:executeScript
            inputs:
              Runtime: python3.7
              Handler: handler
              InputPayload:
                organizationalUnit0Id: '{{ organizationalUnit0Id }}'
                organizationalUnit1Id: '{{ organizationalUnit1Id }}'
                organizationalUnit0Name: '{{ organizationalUnit0Name }}'
                organizationalUnit1Name: '{{ organizationalUnit1Name }}'
                account0Id: '{{ account0Id }}'
                account0Name: '{{ account0Name }}'
                account1Id: '{{ account1Id }}'
                account1Name: '{{ account1Name }}'
                account2Id: '{{ account2Id }}'
                account2Name: '{{ account2Name }}'
                  
                
              Script: |-
                import boto3
                import re

                ssm = boto3.client('ssm')

                def handler(events, context):
                  vars = {
                    'organizationalUnit': [],
                    'account': [],
                  }

                  for k, v in events.items():
                    (what, index, key) = re.findall('(\w+)(\d)(\w+)', k)[0]
                    index = int(index)

                    if index >= len(vars[what]):
                      vars[what].append({})

                    vars[what][index][key] = v

                  for ou in vars['organizationalUnit']:
                    ssm.put_parameter(
                      Name='/founopticum/ou_{}'.format(ou['Name'].lower()),
                      Value=ou['Id'],
                      Overwrite=True,
                      Type='String',
                    )

                  for account in vars['account']:
                    ssm.put_parameter(
                      Name='/founopticum/account_id_{}'.format(account['Name'].lower().replace(' ', '')),
                      Value=account['Id'],
                      Overwrite=True,
                      Type='String',
                    )

  StartExecutionRoleForSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
