AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Automated Best-Practices for AWS Cloud setups - https://superwerker.cloud

Parameters:
  AuditAWSAccountEmail:
    Type: String
    Default: ""
    Description: Mail Address used to create an AWS Account for Audit purposes. (Leave empty to skip)
    MaxLength: 64
    AllowedPattern: (^$|^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$)
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of mail@example.com
  LogArchiveAWSAccountEmail:
    Type: String
    Default: ""
    Description: Mail Address used to create an AWS Account for Log Archive purposes. (Leave empty to skip)
    MaxLength: 64
    AllowedPattern: (^$|^[_A-Za-z0-9-\+\.]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$)
    ConstraintDescription: Account Email can contain only ASCII characters. This must be in the format of mail@example.com
  Domain:
    Type: String
    Description: Domain used for Rootmail feature
  Subdomain:
    Type: String
    Default: aws
    Description: Sub domain used for Rootmail feature
  IncludeBudget:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  IncludeControlTower:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  IncludeGuardDuty:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  IncludeSecurityHub:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  IncludeBackup:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  IncludeServiceControlPolicies:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  IncludeRootMail:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Type: String
  TemplateUrlPrefix:
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Account Configuration
      Parameters:
      - AuditAWSAccountEmail
      - LogArchiveAWSAccountEmail
    - Label:
        default: Features
      Parameters:
      - IncludeBudget
      - IncludeControlTower
      - IncludeGuardDuty
      - IncludeSecurityHub
      - IncludeBackup
      - IncludeServiceControlPolicies
      - IncludeRootMail
    - Label:
        default: Domain Configuration
      Parameters:
      - Domain
      - Subdomain
    - Label:
        default: Advanced Configuration
      Parameters:
      - TemplateUrlPrefix
    ParameterLabels:
      AuditAWSAccountEmail:
        default: Audit Account Mail Address
      LogArchiveAWSAccountEmail:
        default: Log Archive Account Mail Address
      Domain:
        default: Domain for automated DNS configuration
      Subdomain:
        default: Subdomain for automated DNS configuration
      TemplateUrlPrefix:
        default: Prefix for CloudFormation Templates
      IncludeBudget:
        default: Enable Budget Alarm for monthly AWS spendings 
      IncludeControlTower:
        default: Enable AWS Control Tower
      IncludeGuardDuty:
        default: Enable Amazon GuardDuty
      IncludeSecurityHub:
        default: Enable AWS Security Hub
      IncludeBackup:
        default: Enable Automated Backups
      IncludeServiceControlPolicies:
        default: Enable Service Control Policies in AWS Organizations
      IncludeRootMail:
        default: Enable automated AWS Account root mail handling

Conditions:
  IncludeBudget: !Equals [ !Ref IncludeBudget, 'Yes' ]
  IncludeControlTower: !Equals [ !Ref IncludeControlTower, 'Yes' ]
  IncludeGuardDuty: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeGuardDuty, 'Yes' ]
  IncludeRootMail: !Equals [ !Ref IncludeRootMail, 'Yes' ]
  IncludeSecurityHub: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeSecurityHub, 'Yes' ]
  IncludeBackup: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeBackup, 'Yes' ]
  IncludeServiceControlPolicies: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeServiceControlPolicies, 'Yes' ]
  GenerateAuditAWSAccountEmail: !And
    - !Condition IncludeRootMail
    - !Equals [ !Ref AuditAWSAccountEmail, "" ]
  GenerateLogArchiveEmail: !And
    - !Condition IncludeRootMail
    - !Equals [ !Ref LogArchiveAWSAccountEmail, "" ]

Resources:

  Budget:
    Condition: IncludeBudget
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/budget.yaml

  ControlTower:
    Condition: IncludeControlTower
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/control-tower.yaml
      Parameters:
        AuditAWSAccountEmail: !If
          - GenerateAuditAWSAccountEmail
          - !GetAtt GeneratedAuditAWSAccountEmail.email
          - !Ref AuditAWSAccountEmail
        LogArchiveAWSAccountEmail: !If
          - GenerateLogArchiveEmail
          - !GetAtt GeneratedLogArchiveAWSAccountEmail.email
          - !Ref LogArchiveAWSAccountEmail

  GeneratedAuditAWSAccountEmail:
    Condition: GenerateAuditAWSAccountEmail
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateLogAndOrAuditEmailCustomResource.Arn

  GeneratedLogArchiveAWSAccountEmail:
    Condition: GenerateLogArchiveEmail
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateLogAndOrAuditEmailCustomResource.Arn

  GenerateLogAndOrAuditEmailCustomResource:
    Condition: IncludeRootMail
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !GetAtt RootMail.Outputs.EmailGeneratorFunction
      InlineCode: !Sub |
        import boto3
        import cfnresponse
        import json

        lambda_client = boto3.client("lambda")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            if RequestType == CREATE or RequestType == UPDATE:
              lambda_response = lambda_client.invoke(
                FunctionName='${RootMail.Outputs.EmailGeneratorFunction}'
              )

              response_json = json.loads(lambda_response['Payload'].read().decode('utf-8'))
              data['email'] = response_json['email']

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  GuardDuty:
    Condition: IncludeGuardDuty
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/guardduty.yaml

  LivingDocumentation:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/living-documentation.yaml
      Parameters:
        SuperwerkerDomain: !If
          - IncludeRootMail
          - !Sub '${Subdomain}.${Domain}'
          - ''

  RootMail:
    Condition: IncludeRootMail
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/rootmail.yaml
      Parameters:
        Domain: !Ref Domain
        Subdomain: !Ref Subdomain

  SecurityHub:
    Condition: IncludeSecurityHub
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/security-hub.yaml

  Backup:
    Condition: IncludeBackup
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlTower
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/backup.yaml

  ServiceControlPolicies:
    Condition: IncludeServiceControlPolicies
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlTower
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/service-control-policies.yaml
      Parameters:
        IncludeSecurityHub: !If
          - IncludeSecurityHub
          - true
          - false
        IncludeBackup: !If
          - IncludeBackup
          - true
          - false

Outputs:

  RootMailDelegationTarget:
    Condition: IncludeRootMail
    Description: Nameservers for the hosted zone delegation
    Value: !GetAtt RootMail.Outputs.DelegationTarget
