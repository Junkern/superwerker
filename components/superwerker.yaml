AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  AuditAWSAccountEmail:
    Type: String
    Default: ""
  LogArchiveAWSAccountEmail:
    Type: String
    Default: ""
  Domain:
    Type: String
  IncludeControlTower:
    AllowedValues:
      - true
      - false
    Default: true
    Type: String
  IncludeGuardDuty:
    AllowedValues:
      - true
      - false
    Default: true
    Type: String
  IncludeSecurityHub:
    AllowedValues:
      - true
      - false
    Default: true
    Type: String
  IncludeServiceControlPolicies:
    AllowedValues:
      - true
      - false
    Default: true
    Type: String
  IncludeRootMail:
    AllowedValues:
      - true
      - false
    Default: true
    Type: String
  TemplateUrlPrefix:
    Type: String

Conditions:
  IncludeControlTower: !Equals [ !Ref IncludeControlTower, true ]
  IncludeGuardDuty: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeGuardDuty, true ]
  IncludeRootMail: !Equals [ !Ref IncludeRootMail, true ]
  IncludeSecurityHub: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeSecurityHub, true ]
  IncludeServiceControlPolicies: !And
    - !Condition IncludeControlTower
    - !Equals [ !Ref IncludeServiceControlPolicies, true ]
  GenerateAuditAWSAccountEmail: !And
    - !Condition IncludeRootMail
    - !Equals [ !Ref AuditAWSAccountEmail, "" ]
  GenerateLogArchiveEmail: !And
    - !Condition IncludeRootMail
    - !Equals [ !Ref LogArchiveAWSAccountEmail, "" ]

Resources:

  ControlTower:
    Condition: IncludeControlTower
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/control-tower.yaml
      Parameters:
        AuditAWSAccountEmail: !If
          - GenerateAuditAWSAccountEmail
          - !GetAtt GeneratedAuditAWSAccountEmail.email
          - !Ref AuditAWSAccountEmail
        LogArchiveAWSAccountEmail: !If
          - GenerateLogArchiveEmail
          - !GetAtt GeneratedLogArchiveAWSAccountEmail.email
          - !Ref LogArchiveAWSAccountEmail

  GeneratedAuditAWSAccountEmail:
    Condition: GenerateAuditAWSAccountEmail
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateLogAndOrAuditEmailCustomResource.Arn

  GeneratedLogArchiveAWSAccountEmail:
    Condition: GenerateLogArchiveEmail
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateLogAndOrAuditEmailCustomResource.Arn

  GenerateLogAndOrAuditEmailCustomResource:
    Condition: IncludeRootMail
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 200
      Handler: index.handler
      Runtime: python3.7
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:Invoke
              Resource: !GetAtt RootMail.Outputs.EmailGeneratorFunction
      InlineCode: !Sub |
        import boto3
        import cfnresponse

        lambda = boto3.client("lambda")

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")
            RuleSetName = Properties["RuleSetName"]

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            if RequestType == CREATE or RequestType == UPDATE:
              data['email'] = lambda.invoke(
                FunctionName='${RootMail.Outputs.EmailGeneratorFunction}'
              )['Payload']['email']

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  GuardDuty:
    Condition: IncludeGuardDuty
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/guardduty.yaml

  RootMail:
    Condition: IncludeRootMail
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/rootmail.yaml
      Parameters:
        Domain: !Ref Domain

  SecurityHub:
    Condition: IncludeSecurityHub
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/security-hub.yaml

  ServiceControlPolicies:
    Condition: IncludeServiceControlPolicies
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlTower
    Properties:
      TemplateURL: !Sub ${TemplateUrlPrefix}/components/service-control-policies.yaml

Outputs:

  RootMailDelegationTarget:
    Condition: IncludeRootMail
    Description: Nameservers for the hosted zone delegation
    Value: !GetAtt RootMail.Outputs.DelegationTarget
