AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Sets up GuardDuty with a delegated administor and automatically enabled for all AWS accounts in the AWS Organization

Parameters:
  AuditAWSAccountId:
    Type: String
  LogArchiveAWSAccountId:
    Type: String
  LogArchiveAWSAccountEmail:
    Type: String
  MasterAWSAccountEmail:
    Type: String
Resources:

  SetupLandingZoneTrigger:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
        detail:
          serviceEventDetails:
            createManagedAccountStatus:
              state:
                - SUCCEEDED
          eventName:
            - SetupLandingZone
      State: ENABLED
#      Targets:
#        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableGuardDutyOrganizations}
#          Id: EnableS3BlockPublicAccessViaSSM
#          RoleArn: !GetAtt SSMAutomationExecutionRoleforCWEvents.Arn

  SSMAutomationExecutionRoleforCWEvents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartAutomationExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableGuardDutyOrganizations}:*

  EnableGuardDutyOrganizations:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        assumeRole: !GetAtt EnableGuardDutyOrganizationsRole.Arn
        mainSteps:
          - name: CheckIfOrganizationAdminAccountIsAlReadyRegistered
            action: aws:executeAwsApi
            inputs:
              Service: guardduty
              Api: ListOrganizationAdminAccounts
            outputs:
              - Name: AdminAccountId
                Selector: $.AdminAccounts[0].AdminAccountId
            nextStep: EnableOrganizationAdminAccountChoice
          - name: EnableOrganizationAdminAccountChoice
            action: aws:branch
            inputs:
              Choices:
                - NextStep: EnableGuardDutyInMaster
                  Variable: '{{ CheckIfOrganizationAdminAccountIsAlReadyRegistered.AdminAccountId }}'
                  StringEquals: !Ref AuditAWSAccountId
              Default: EnableOrganizationAdminAccount
          - name: EnableOrganizationAdminAccount
            action: aws:executeAwsApi
            inputs:
              Service: guardduty
              Api: EnableOrganizationAdminAccount
              AdminAccountId: !Ref AuditAWSAccountId
            nextStep: EnableGuardDutyInMaster
          - name: EnableGuardDutyInMaster
            action: aws:executeAwsApi
            inputs:
              Service: guardduty
              Api: CreateDetector
              Enable: true
            nextStep: EnableGuardDutyExistingAccounts
          # TODO: check for positive execution result
          - name: EnableGuardDutyExistingAccounts
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: StartAutomationExecution
              DocumentName: !Ref EnableGuardDutyExistingAccounts
              TargetLocations:
                - ExecutionRoleName: AWSControlTowerExecution
                  Accounts:
                    - !Ref AuditAWSAccountId
                  Regions:
                    - !Ref AWS::Region
              Parameters:
                LogArchiveAWSAccountId:
                  - !Ref LogArchiveAWSAccountId
                LogArchiveAWSAccountEmail:
                  - !Ref LogArchiveAWSAccountEmail
                MasterAWSAccountId:
                  - !Ref AWS::AccountId
                MasterAWSAccountEmail:
                  - !Ref MasterAWSAccountEmail
            isEnd: true

  EnableGuardDutyOrganizationsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
#    ManagedPolicyArns:
#        -
      Policies:
        - PolicyName: EnableAWSServiceAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - guardduty:EnableOrganizationAdminAccount
                  - guardduty:ListOrganizationAdminAccounts
                  - guardduty:CreateDetector
                  - organizations:EnableAWSServiceAccess
                  - organizations:ListAWSServiceAccessForOrganization
                  - organizations:ListDelegatedAdministrators
                  - organizations:RegisterDelegatedAdministrator
                  - organizations:DescribeOrganization
                Resource: '*'
        - PolicyName: AllowStartAutomationExecution
          PolicyDocument:
            Statement:
                - Effect: Allow
                  Action: ssm:StartAutomationExecution
                  Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableGuardDutyExistingAccounts}:*'
        - PolicyName: AllowCallCrossAccountAutomation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::*:role/AWSControlTowerExecution

  EnableGuardDutyExistingAccounts:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        parameters:
          LogArchiveAWSAccountId:
            type: String
          LogArchiveAWSAccountEmail:
            type: String
          MasterAWSAccountId:
            type: String
          MasterAWSAccountEmail:
            type: String
        mainSteps:
          - name: GetDetectorId
            action: aws:executeAwsApi
            inputs:
              Service: guardduty
              Api: ListDetectors
            outputs:
              - Name: DetectorId
                Selector: $.DetectorIds[0]
            nextStep: CreateMembers
          - name: CreateMembers
            action: aws:executeAwsApi
            inputs:
              Service: guardduty
              Api: CreateMembers
              DetectorId: '{{ GetDetectorId.DetectorId }}'
              AccountDetails:
                - AccountId: '{{ MasterAWSAccountId }}'
                  Email: '{{ MasterAWSAccountEmail }}'
                - AccountId: '{{ LogArchiveAWSAccountId }}'
                  Email: '{{ LogArchiveAWSAccountEmail }}'
            nextStep: EnableGuardDutyExistingAccounts
          - name: EnableGuardDutyExistingAccounts
            action: aws:executeAwsApi
            inputs:
              Service: guardduty
              Api: UpdateOrganizationConfiguration
              DetectorId: '{{ GetDetectorId.DetectorId }}'
              AutoEnable: true
