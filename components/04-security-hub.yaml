AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Sets up SecurityHub with a delegated administor and automatically enabled for all AWS accounts in the AWS Organization

# TODO: the parameters don't have to be passed when set up via control tower event. Control Tower event has all the information needed
Parameters:
  AuditAWSAccountId:
    Type: String
  LogArchiveAWSAccountId:
    Type: String
  LogArchiveAWSAccountEmail:
    Type: String
  MasterAWSAccountEmail:
    Type: String
Resources:

#  SetupLandingZoneTrigger:
#    Type: AWS::Events::Rule
#    Properties:
#      EventPattern:
#        detail-type:
#          - AWS Service Event via CloudTrail
#        source:
#          - aws.controltower
#        detail:
#          serviceEventDetails:
#            createManagedAccountStatus:
#              state:
#                - SUCCEEDED
#          eventName:
#            - SetupLandingZone
#      State: ENABLED
#      Targets:
#        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableSecurityHubOrganizations}
#          Id: EnableSecurityHubOrganizations
#          RoleArn: !GetAtt SSMAutomationExecutionRoleforCWEvents.Arn

#  SSMAutomationExecutionRoleforCWEvents:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: events.amazonaws.com
#            Action: sts:AssumeRole
#      Policies:
#        - PolicyName: AllowStartAutomationExecution
#          PolicyDocument:
#            Statement:
#              - Effect: Allow
#                Action:
#                  - ssm:StartAutomationExecution
#                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableSecurityHubOrganizations}:*

  CreateLandingZoneEnableSecurityHub:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        assumeRole: !GetAtt CreateLandingZoneEnableSecurityHubRole.Arn
        mainSteps:
          - name: EnableSecurityHubInAuditAccount
            action: aws:executeAutomation
            inputs:
              DocumentName: !Ref EnableSecurityHubInOrgAccount
              RuntimeParameters:
                AWSAccountId:
                  - !Ref AuditAWSAccountId
#          - name: EnableSecurityHubMasterInAuditAccount
#          - name: EnableSecurityHubMemberInOrgMasterAccount
#          - name: EnableSecurityHubMemberInLogArchiveAccount

  CreateLandingZoneEnableSecurityHubRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartAutomationExecutionEnableSecurityHub
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ssm:StartAutomationExecution
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableSecurityHubInOrgAccount}:*
              - Effect: Allow
                Action:
                  - ssm:GetAutomationExecution
                Resource: '*'

  EnableSecurityHubInOrgAccount:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        assumeRole: !GetAtt EnableSecurityHubInOrgAccountRole.Arn
        parameters:
          AWSAccountId:
            type: String
        mainSteps:
          - name: EnableSecurityHubInOrgAccount
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: StartAutomationExecution
              DocumentName: !Ref EnableSecurityHub
              TargetLocations:
                - ExecutionRoleName: AWSControlTowerExecution
                  Accounts:
                    - '{{ AWSAccountId }}'
                  Regions:
                    - !Ref AWS::Region
            outputs:
              - Name: AutomationExecutionId
                Selector: $.AutomationExecutionId
            nextStep: WaitForEnableSecurityHubInOrgAccount
          - name: WaitForEnableSecurityHubInOrgAccount
            timeoutSeconds: 60
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: ssm
              Api: DescribeAutomationExecutions
              Filters:
                - Key: ExecutionId
                  Values:
                    - '{{ EnableSecurityHubInOrgAccount.AutomationExecutionId }}'
              PropertySelector: $.AutomationExecutionMetadataList[0].AutomationExecutionStatus
              DesiredValues:
                - Success

  EnableSecurityHubInOrgAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowStartAutomationExecutionEnableSecurityHub
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ssm:StartAutomationExecution
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${EnableSecurityHub}:*
        - PolicyName: AllowDescribeSsmAutomationExecutionStatus
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeAutomationExecutions
                Resource: '*'
        - PolicyName: AllowCallCrossAccountAutomation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: arn:aws:iam::*:role/AWSControlTowerExecution

  EnableSecurityHub:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        mainSteps:
          - name: CheckIfSecurityHubIsEnabled
            action: aws:executeAwsApi
            inputs:
              Service: securityhub
              Api: DescribeHub
            isCritical: false # this step can fail on purpose
            onFailure: step:EnableSecurityHub
            nextStep: NoOp
          - name: NoOp
            action: aws:sleep # use sleep as a workaround for no-op
            inputs:
              Duration: PT0S
            isEnd: true
          - name: EnableSecurityHub
            action: aws:executeAwsApi
            inputs:
              Service: securityhub
              Api: EnableSecurityHub
            isEnd: true


#  EnableSecurityHubRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ssm.amazonaws.com
#            Action: sts:AssumeRole
#          - Effect: Allow
#            Principal:
#              AWS: !Ref AWS::AccountId
#            Action: sts:AssumeRole
#      Policies:
#        - PolicyName: EnableSecurityHubMember
#          PolicyDocument:
#            Statement:
#              - Effect: Allow
#                Action:
#                  - securityhub:DescribeHub
#                  - securityhub:EnableSecurityHub
#                  - iam:CreateServiceLinkedRole
#                Resource: '*'

