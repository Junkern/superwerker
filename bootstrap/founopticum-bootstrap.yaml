AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  GitHubOwner:
    Type: String
    Default: superluminar-io
  RepositoryName:
    Type: String
    Default: founopticum
  BranchName:
    Type: String
    Default: master
  GithubTokenSecretsManagerPath:
    Type: String
    Default: /founopticum/github-token

Resources:

  FounopticumBootstrapPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt FounopticumBootstrapPipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:/founopticum/github-token:SecretString}}'
                PollForSourceChanges: false

        - Name: DeployAndTestFounopticum
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref Cleanup
              InputArtifacts:
                - Name: SourceOutput
              Name: Cleanup
              RunOrder: 1

            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName: !Ref DeploymentBucket
                Extract: true
              InputArtifacts:
                - Name: SourceOutput
              Name: DeployCfnTempatles
              RunOrder: 2

            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref EmailRandomizer
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: EmailRandomizer
              Name: EmailRandomizer
              RunOrder: 3

            - Name: UpdateControlTowerStack
              RunOrder: 4
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
                - Name: EmailRandomizer
              Configuration:
                RoleArn: !GetAtt CloudFormationRole.Arn
                ActionMode: REPLACE_ON_FAILURE
                StackName: founopticum-00-control-tower
                TemplatePath: SourceOutput::components/00-control-tower.yaml
                ParameterOverrides: |
                  {
                    "LogArchiveAWSAccountEmail": {"Fn::GetParam":["EmailRandomizer", "EmailRandomizer.json", "LogArchiveAWSAccountEmail"]},
                    "AuditAWSAccountEmail": {"Fn::GetParam":["EmailRandomizer", "EmailRandomizer.json", "AuditAWSAccountEmail"]}
                  }

                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
      ArtifactStore:
        Type: S3
        Location: !Ref FounopticumUpdatePipelineArtifactStore

  FounopticumBootstrapPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege

  FounopticumUpdatePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:/founopticum/github-token:SecretString}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref FounopticumBootstrapPipeline
      TargetAction: SourceAction
      Name: !Sub ${AWS::StackName}-FounopticumUpdatePipelineWebhook
      TargetPipelineVersion: !GetAtt FounopticumBootstrapPipeline.Version
      RegisterWithThirdParty: true

  FounopticumUpdatePipelineArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -  ServerSideEncryptionByDefault:
               SSEAlgorithm: AES256

  DeploymentBucket:
    Type: AWS::S3::Bucket

  Cleanup:
    Type: AWS::CodeBuild::Project
    Properties:
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt EmailRandomizerRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                # remove guardduty admin delegation
                - aws guardduty disable-organization-admin-account --admin-account-id $(aws guardduty list-organization-admin-accounts --query 'AdminAccounts[0].AdminAccountId' --output text) || true
                - aws organizations deregister-delegated-administrator --account-id "$(aws organizations list-delegated-administrators --query 'DelegatedAdministrators[0].Id' --output text)" --service-principal guardduty.amazonaws.com || true
                # delete detector in master account
                - aws guardduty delete-detector --detector-id $(aws guardduty list-detectors --query 'DetectorIds[0]' --output text) || true

  EmailRandomizer:
    Type: AWS::CodeBuild::Project
    Properties:
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt EmailRandomizerRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                - timestamp=$(date +%s)
                # write random email adresses in case it's not in the parameter store
                - "aws ssm get-parameter --name /founopticum_bootstrap/email_adresses || (printf '{\"LogArchiveAWSAccountEmail\": \"%s\", \"AuditAWSAccountEmail\": \"%s\"}' $(printf 'founopticum-aws-test+%s@superluminar.io' log-archive$timestamp) $(printf 'founopticum-aws-test+%s@superluminar.io' audit$timestamp) > /tmp/EmailRandomizerTemp.json &&  aws ssm put-parameter --name /founopticum_bootstrap/email_adresses --type String --value file:///tmp/EmailRandomizerTemp.json --no-overwrite)"
                # get the parameter value and write the artifact each time for the next pipeline step (CloudFormation)
                - aws ssm get-parameter --name /founopticum_bootstrap/email_adresses --query Parameter.Value --output text > EmailRandomizer.json
          artifacts:
            files:
              - EmailRandomizer.json
            name: EmailRandomizer

  EmailRandomizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege