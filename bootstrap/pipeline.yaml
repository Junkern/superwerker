AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  GitHubOwner:
    Type: String
    Default: superluminar-io
  RepositoryName:
    Type: String
    Default: founopticum
  BranchName:
    Type: String
    Default: master
  GithubTokenSecretsManagerPath:
    Type: String
    Default: /founopticum/github-token

Resources:

  ArtifactStoreS3Location:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -  ServerSideEncryptionByDefault:
               SSEAlgorithm: AES256

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:/founopticum/github-token:SecretString}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: SourceAction
      Name: !Sub ${AWS::StackName}-PipelineWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:/founopticum/github-token:SecretString}}'
                PollForSourceChanges: false
        - Name: RemoveControlTowerDecommissionFallout
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              Name: RemoveControlTowerDecommissionFallout
              RunOrder: 1

        - Name: RemoveFounopticum
          Actions:
            - Name: RemoveControlTowerStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ActionMode: DELETE_ONLY
                RoleArn: !GetAtt BuildProjectRole.Arn
                StackName: founopticum-00-control-tower

        - Name: InstallFounopticum
          Actions:
            - Name: CreateControlTowerStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !GetAtt BuildProjectRole.Arn
                StackName: founopticum-00-control-tower
                ParameterOverrides: |
                  {
                    "LogArchiveAWSAccountEmail": "founopticum-aws-test+log-archive7@superluminar.io",
                    "AuditAWSAccountEmail": "founopticum-aws-test+audit7@superluminar.io"
                  }
                TemplatePath: SourceOutput::components/00-control-tower.yaml
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND

#            - ActionTypeId:
#                Category: Invoke
#                Owner: AWS
#                Provider: StepFunctions
#                Version: "1"
#              Configuration:
#                StateMachineArn: !Ref WaitStateMachine
#              InputArtifacts:
#                - Name: SourceOutput
#              Name: Wait60Minutes
#              RunOrder: 2
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreS3Location

  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-buildproject
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            parameter-store:
              ou_core: /founopticum/ou_core
              ou_custom: /founopticum/ou_custom
              ou_graveyard: /founopticum_bootstrap/ou_graveyard
              account_id_logarchive: /founopticum/account_id_logarchive
              account_id_audit: /founopticum/account_id_audit
          phases:
            build:
              commands:
                # automate https://docs.aws.amazon.com/controltower/latest/userguide/known-issues-decommissioning.html
                - aws iam detach-role-policy --role-name AWSControlTowerAdmin --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerAdminPolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerAdminPolicy || true
                - aws iam delete-role --role-name AWSControlTowerAdmin || true
                - aws iam detach-role-policy --role-name AWSControlTowerCloudTrailRole --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerCloudTrailRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerCloudTrailRolePolicy || true
                - aws iam delete-role --role-name AWSControlTowerCloudTrailRole || true
                - aws iam detach-role-policy --role-name AWSControlTowerStackSetRole --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerStackSetRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerStackSetRolePolicy || true
                - aws iam delete-role --role-name AWSControlTowerStackSetRole || true

                - aws organizations move-account --account-id $account_id_logarchive --source-parent-id $ou_core --destination-parent-id $ou_graveyard || true
                - aws organizations move-account --account-id $account_id_audit --source-parent-id $ou_core --destination-parent-id $ou_graveyard || true
                - aws organizations delete-organizational-unit --organizational-unit-id $ou_core || true
                - aws organizations delete-organizational-unit --organizational-unit-id $ou_custom || true

                - aws logs delete-log-group --log-group-name aws-controltower/CloudTrailLogs || true

  BuildProjectRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
             - codebuild.amazonaws.com
             - cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codebuild-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:DeleteObject*
                  - s3:PutObject*
                  - s3:Abort*
                Effect: Allow
                Resource:
                  - !Sub ${ArtifactStoreS3Location.Arn}
                  - !Sub ${ArtifactStoreS3Location.Arn}/*

  WaitStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: Wait
        States:
          Wait:
            Type: Wait
            Seconds: 3600
            End: true
      Policies:
        - CloudWatchPutMetricPolicy: {}
          
  DecommissionLandingZoneCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: fnptcm-remove-ct
      ArtifactS3Location: !Sub s3://${DecommissionLandingZoneArtifactLocation}
      ExecutionRoleArn: !GetAtt DecommissionLandingZoneCanaryRole.Arn
      RuntimeVersion: syn-1.0
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 600
      Schedule:
        DurationInSeconds: 3600
        Expression: rate(0 minute)
      Code:
        Handler: pageLoadBlueprint.handler
        Script: !Sub |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const httpGet = url => {
            const https = require('https');
            return new Promise((resolve, reject) => {
              https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => resolve(body));
              }).on('error', reject);
            });
          };

          const flowBuilderBlueprint = async function () {
            let page = await synthetics.getPage();

            await synthetics.executeStep('consoleLogin', async function () {
              const AWS = require("aws-sdk");

              const federationEndpoint = 'https://signin.aws.amazon.com/federation';
              const issuer = 'founopticum';
              const destination = 'https://console.aws.amazon.com/';

              let credentials = await AWS.config.credentialProvider.resolve((err, cred) => { return cred; }).resolvePromise()

              const session = {
                sessionId: credentials.accessKeyId,
                sessionKey: credentials.secretAccessKey,
                sessionToken: credentials.sessionToken
              };

              const encodedSession = encodeURIComponent(JSON.stringify(session));
              const signinTokenUrl = `${!federationEndpoint}?Action=getSigninToken&SessionDuration=3600&Session=${!encodedSession}`;

              const signinResponse = await httpGet(signinTokenUrl);

              let consoleLoginUrl = `${!federationEndpoint}?Action=login&Issuer=${!issuer}&Destination=${!destination}&SigninToken=${!
                JSON.parse(signinResponse).SigninToken
              }`;

              await page.goto(consoleLoginUrl, {waitUntil: ['load', 'networkidle0']});

            });

            await synthetics.executeStep('decommission', async function () {
              await page.goto("https://eu-west-1.console.aws.amazon.com/controltower/home/settings", {waitUntil: ['load', 'networkidle0']});
              await page.click("#decommission > div > div.ct-beta-features-content > div > div.awsui-util-mt-l > awsui-button > button");
              await page.click("#awsui-checkbox-0");
              await page.click("#awsui-checkbox-1");
              await page.click("#awsui-checkbox-2");
              await page.type("#awsui-input-0", "DECOMMISSION")
              await page.click("#decommission > awsui-modal > div.awsui-modal-container > div > div > div.awsui-modal-footer.awsui-util-container-footer > span > span > awsui-button.ct-action-submit > button");
              await page.waitFor(10000);
            });
          };

          exports.handler = async () => {
            return await flowBuilderBlueprint();
          };

  DecommissionLandingZoneArtifactLocation:
    Type: AWS::S3::Bucket

  DecommissionLandingZoneArtifactLocationPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DecommissionLandingZoneArtifactLocation
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: '*'
            Resource:
              - !GetAtt DecommissionLandingZoneArtifactLocation.Arn
              - !Sub ${DecommissionLandingZoneArtifactLocation.Arn}/*
            Principal:
              AWS: !GetAtt DecommissionLandingZoneCanaryRole.Arn

  DecommissionLandingZoneCanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess # fixme: least privilege
      Policies:
        - PolicyName: AllowS3List
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - cloudwatch:PutMetricData
                Resource: '*'
