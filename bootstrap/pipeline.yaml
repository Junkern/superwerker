AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  GitHubOwner:
    Type: String
    Default: superluminar-io
  RepositoryName:
    Type: String
    Default: founopticum
  BranchName:
    Type: String
    Default: master
  GithubTokenSecretsManagerPath:
    Type: String
    Default: /founopticum/github-token

Resources:

  ArtifactStoreS3Location:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -  ServerSideEncryptionByDefault:
               SSEAlgorithm: AES256

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:/founopticum/github-token:SecretString}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref Pipeline
      TargetAction: SourceAction
      Name: !Sub ${AWS::StackName}-PipelineWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:/founopticum/github-token:SecretString}}'
                PollForSourceChanges: false
        - Name: PrepareForControlTower
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              Name: Build
              RunOrder: 1
#            - ActionTypeId:
#                Category: Invoke
#                Owner: AWS
#                Provider: StepFunctions
#                Version: "1"
#              Configuration:
#                StateMachineArn: !Ref WaitStateMachine
#              InputArtifacts:
#                - Name: SourceOutput
#              Name: Wait60Minutes
#              RunOrder: 2
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreS3Location

  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-pipeline-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:DeleteObject*
                  - s3:PutObject*
                  - s3:Abort*
                Effect: Allow
                Resource:
                  - !Sub ${ArtifactStoreS3Location.Arn}
                  - !Sub ${ArtifactStoreS3Location.Arn}/*
              - Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Effect: Allow
                Resource: !GetAtt CodeBuildProject.Arn
              - Action:
                  - states:DescribeStateMachine
                  - states:StartExecution
                Effect: Allow
                Resource: !Ref WaitStateMachine
              - Action: states:DescribeExecution
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:${WaitStateMachine.Name}:*

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-buildproject
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            parameter-store:
              ou_core: /founopticum/ou_core
              ou_custom: /founopticum/ou_custom
              ou_graveyard: /founopticum_bootstrap/ou_graveyard
              account_id_logarchive: /founopticum/account_id_logarchive
              account_id_audit: /founopticum/account_id_audit
          phases:
            build:
              commands:
                # automate https://docs.aws.amazon.com/controltower/latest/userguide/known-issues-decommissioning.html
                - aws iam detach-role-policy --role-name AWSControlTowerAdmin --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerAdminPolicy || true
                - aws iam detach-role-policy --role-name AWSControlTowerAdmin --policy-arn arn:aws:iam::aws:policy/service-role/AWSControlTowerServiceRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerAdminPolicy || true
                - aws iam delete-role --role-name AWSControlTowerAdmin || true
                - aws iam detach-role-policy --role-name AWSControlTowerCloudTrailRole --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerCloudTrailRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerCloudTrailRolePolicy || true
                - aws iam delete-role --role-name AWSControlTowerCloudTrailRole || true
                - aws iam detach-role-policy --role-name AWSControlTowerStackSetRole --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerStackSetRolePolicy || true
                - aws iam delete-policy --policy-arn arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSControlTowerStackSetRolePolicy || true
                - aws iam delete-role --role-name AWSControlTowerStackSetRole || true

                - aws organizations move-account --account-id $account_id_logarchive --source-parent-id $ou_core --destination-parent-id $ou_graveyard || true
                - aws organizations move-account --account-id $account_id_audit --source-parent-id $ou_core --destination-parent-id $ou_graveyard || true
                - aws organizations delete-organizational-unit --organizational-unit-id $ou_core || true
                - aws organizations delete-organizational-unit --organizational-unit-id $ou_custom || true

                - aws logs delete-log-group --log-group-name aws-controltower/CloudTrailLogs || true

#                - aws configure --profile logarchive set role_arn arn:aws:iam::${!account_id_logarchive}:role/OrganizationAccountAccessRole
#                - aws configure --profile logarchive set credential_source EcsContainer
#                - aws --profile logarchive s3 rm s3://aws-controltower-logs-${AWS::AccountId}-${AWS::Region} --recursive
#                - aws --profile logarchive s3 rb s3://aws-controltower-logs-${AWS::AccountId}-${AWS::Region}
#                - aws --profile logarchive s3 rm s3://aws-controltower-s3-access-logs-${AWS::AccountId}-${AWS::Region} --recursive
#                - aws --profile logarchive s3 rb s3://aws-controltower-s3-access-logs-${AWS::AccountId}-${AWS::Region}




  BuildProjectRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codebuild-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:DeleteObject*
                  - s3:PutObject*
                  - s3:Abort*
                Effect: Allow
                Resource:
                  - !Sub ${ArtifactStoreS3Location.Arn}
                  - !Sub ${ArtifactStoreS3Location.Arn}/*

  WaitStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: Wait
        States:
          Wait:
            Type: Wait
            Seconds: 3600
            End: true
      Policies:
        - CloudWatchPutMetricPolicy: {}