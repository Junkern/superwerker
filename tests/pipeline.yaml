AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  GitHubOwner:
    Type: String
    Default: superwerker
  RepositoryName:
    Type: String
    Default: superwerker
  BranchName:
    Type: String
    Default: master
  OrganizationsVendingMachineEndpoint:
    Type: String
  GithubTokenSecretsManagerPath:
    Type: String
    Default: /superwerker/github-token
  RootMailDomain:
    Type: String

Resources:

  SuperwerkerBootstrapPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt SuperwerkerBootstrapPipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: '{{resolve:secretsmanager:/superwerker/github-token:SecretString}}'
                PollForSourceChanges: false

        - Name: DeployAndTestSuperwerker
          Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName: !Ref DeploymentBucket
                Extract: true
              InputArtifacts:
                - Name: SourceOutput
              Name: DeployCfnTempatles
              RunOrder: 40

            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref BuildAndTestProject
              InputArtifacts:
                - Name: SourceOutput
              Name: BuildAndTest
              RunOrder: 50

      ArtifactStore:
        Type: S3
        Location: !Ref SuperwerkerUpdatePipelineArtifactStore

  SuperwerkerBootstrapPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege

  SuperwerkerUpdatePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: '{{resolve:secretsmanager:/superwerker/github-token:SecretString}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref SuperwerkerBootstrapPipeline
      TargetAction: SourceAction
      Name: !Sub ${AWS::StackName}-SuperwerkerUpdatePipelineWebhook
      TargetPipelineVersion: !GetAtt SuperwerkerBootstrapPipeline.Version
      RegisterWithThirdParty: true

  SuperwerkerUpdatePipelineArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -  ServerSideEncryptionByDefault:
               SSEAlgorithm: AES256

  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub superwerker-deployment-${BranchName}

  DeploymentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DeploymentBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub ${DeploymentBucket.Arn}/*

  BuildAndTestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      TimeoutInMinutes: 180
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ROOT_MAIL_DOMAIN
            Value: !Ref RootMailDomain
          - Name: ORGANIZATIONS_VENDING_MACHINE_ENDPOINT
            Value: !Ref OrganizationsVendingMachineEndpoint
          - Name: TEMPLATE_URL_PREFIX
            Value: !Sub https://${DeploymentBucket.DomainName}
          - Name: CAPTCHA_API_KEY
            Value: /superwerker/tests/2captcha_api_key
            Type: SECRETS_MANAGER

      ServiceRole: !GetAtt BuildAndTestProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
          phases:
            build:
              commands:
                # vend fresh account/org
                - ovm_result=$(curl -s ${ORGANIZATIONS_VENDING_MACHINE_ENDPOINT})
                - aws_account_id=$(echo $ovm_result | jq -r .account_id)
                - aws_cross_account_role_arn=$(echo $ovm_result | jq -r .cross_account_role)
                - echo AccountId ${aws_account_id} - Cross Account Role ${aws_cross_account_role_arn}

                # setup AWS CLI to talk to vended account
                - aws configure --profile test_account set role_arn $aws_cross_account_role_arn
                - aws configure --profile test_account set credential_source EcsContainer

                # setup superwerker in vended account
                - aws --profile test_account cloudformation deploy --stack-name superwerker --template-file components/superwerker.yaml --parameter-overrides Domain=${ROOT_MAIL_DOMAIN} TemplateUrlPrefix=${TEMPLATE_URL_PREFIX} --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --no-fail-on-empty-changeset &
                - while ! domain_name_servers=$(aws --profile test_account ssm get-parameter --name /superwerker/domain_name_servers --query Parameter.Value --output text); do sleep 10; done
                - aws cloudformation deploy --stack-name superwerker-pipeline-dns-wiring --template-file tests/pipeline-dns-wiring.yaml --parameter-overrides RootMailDelegationTarget=$domain_name_servers RootMailDomain=${ROOT_MAIL_DOMAIN} --no-fail-on-empty-changeset
                - sleep 3600 # give superwerker stack time to finish (Control Tower needs ~1h)
                - aws --profile test_account cloudformation wait stack-create-complete --stack-name superwerker

                - aws --profile test_account cloudformation deploy --stack-name superwerker-pipeline-account-factory-wiring --template-file tests/account-factory-wiring.yaml --parameter-overrides PipelineCloudformationRoleArn=$aws_cross_account_role_arn --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --no-fail-on-empty-changeset
                - aws --profile test_account cloudformation deploy --stack-name superwerker-pipeline-account-factory-fixture --template-file tests/account-factory.yaml --parameter-overrides AccountName=sw-${aws_account_id} AccountEmail=root+${aws_account_id}@aws.${ROOT_MAIL_DOMAIN} SSOUserFirstName=Isolde SSOUserLastName=Mawidder-Baden SSOUserEmail=root+${aws_account_id}@aws.${ROOT_MAIL_DOMAIN} ManagedOrganizationalUnit=Custom --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM --no-fail-on-empty-changeset

                - cd tests
                - pip3 install -r requirements.txt
                - AWS_PROFILE=test_account ACCOUNT_FACTORY_ACCOUNT_ID=$(aws --profile test_account cloudformation describe-stacks --stack-name superwerker-pipeline-account-factory-fixture --query "Stacks[0].Outputs[?OutputKey=='AccountId'].OutputValue" --output text) python3 -munittest rootemails.py tests.py

              finally:
                # close sub-accounts so that the OVM can close the main / management account later
                - cd $CODEBUILD_SRC_DIR/tests/close-active-subaccounts
                - npm i
                # Node + ECS Container Creds + Assume Role doesn't seem to work, so work around by setting credentials
                - eval $(aws sts assume-role --role-arn $aws_cross_account_role_arn --role-session-name test | jq -r '.Credentials | "export JS_AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport JS_AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport JS_AWS_SESSION_TOKEN=\(.SessionToken)\n"')
                - AWS_ACCESS_KEY_ID=$JS_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$JS_AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN=$JS_AWS_SESSION_TOKEN CAPTCHA_KEY=$CAPTCHA_API_KEY node close-active-subaccounts.js

  BuildAndTestProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # FIXME: least privilege
